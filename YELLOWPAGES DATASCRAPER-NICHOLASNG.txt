# READ ME :  THIS IS A DATASCRAPER THAT AUTOMATES BOTH THE PULLING OF DATA FROM THE YELLOWPAGES, SCANS THROUGH ALL THE PAGES, PARSES THE DESIRED INFORMATION AND EFFECT SOME REFORMATTING AND CLEANUPS UPON THE DATA. THE INFORMATION IS THEN STORED INTO A XLS
# IMPORTANT: FOR THE IMPORT INTO AN XLS TO WORK. YOU WILL NEED TO CHANGE THE DIRECTORY ACCORDINGLY

import xlwt
import urllib.request
from pathlib import Path


#DEFINE A FUNCTION(PARSE) TO PULL THE DESIRED ATTRIBUTE FROM THE SOURCE USING LEADERS AND TRAILER CUES AS DELIMITERS

def parse(searchstring, leader, trailer):
    try:
        end_of_leader = searchstring.index(leader) + len(leader) # LOOKS FOR THE INDEX AT THE END OF THE LEADER (yp_searchTotalPages) BY ADDING THE LENGTH OF THE LEADER ON TOP OF ITS INDEX
        start_of_trailer = searchstring.index(trailer, end_of_leader) # LOOKS FOR THE INDEX OF THE trailer(",) AFTER THE end of leader INDEX
        return searchstring[end_of_leader:start_of_trailer] # RETURNS THE DESIRED VALUE STRING EXCLUDING THE LEADER AND STOPS AT THE START OF TRAILER
    except ValueError:
        return ""


def returnpages(s):
    try:
        returnpages = parse(s, 'yp_searchTotalPages" : "', '",') #USES THE PARSE() FUNCTION TO DETERMINE TOTAL NUMBER OF PAGES
        return int(returnpages) # RETURNS THE STRING THAT IS EQUAL TO THE NUMBER OF PAGES AND CONVERTS IT TO AN INT
    except:
        return 0

#LET USER KNOW WHAT THE PURPOSE OF THE SCRIPT IS

print(f"This script is used to pull data from the 411 website and put it in an xls ")

#ASK THE USER WHICH COMPANY/STORE THEY WANT TO LOOK FOR
username = input(f"Username: ") # USERNAME SHOULD BE NgNicholas FOR THE SAKE OF THE ASSIGNMENT
business_name = input(f"Which company would you like to look for?: \n")
business_url = business_name.replace(" ", "+") # FORMATS THE STRING TO BE USED WITHIN A URL


# PASS THE COMPANY NAME TO THE URL SEARCH
page = 1
fileobj = urllib.request.urlopen(f"https://www.yellowpages.ca/search/si/1/{business_url}/Canada")

s = fileobj.read()  # Read the content of the first page
resultlist = list()  # List to store the parsed data

pages = returnpages(s.decode()) #CALLS THE RETURNPAGES FUNCTION AND OUTPUT IT AS 'PAGES'
print(pages) #PRINTS OUT NUMBER OF PAGES TOTAL

list_u_address = [] #EMPTY LIST TO STORE ALL UNIQUE VALUES TO WEED OUT THE DUPLICATES
dupelist = [] #EMPTY LIST TO STORE THE DUPLICATES

# LOOPING THROUGH THE PAGES

for page in range(1, pages): #LOOPS THROUGH ALL THE PAGES WITHIN THE RANGE FROM 1 TO TOTAL NUMBER OF PAGES
    url = f"https://www.yellowpages.ca/search/si/{page}/{business_url}/Canada" #VARIABLE PAGE GETS A NEW VALUE FOR EVERY ITERATION IN THE ABOVE FOR LOOP TO CAPTURE ALL PAGES FROM 1ST TO LAST
    fileobj = urllib.request.urlopen(url) #OPENS URL BASED ON PAGE NUMBER
    s = fileobj.read() # READS THE PARTICULAR PAGE

    # Split the page content based on a specific delimiter related to address listing
    addresssplit = s.decode().split('<div class="listing__address address mainLocal noNum">') # RETURNS LIST OF ITEMS FROM THE STRING

# ADDRESS PARSING

    for item in addresssplit: #ITEM IS THE FULL STRING WITHIN THE LIST
        # Parse address, city, province, postal code, and phone number from each split section
        address = parse(item, '<span class="jsMapBubbleAddress"  itemprop="streetAddress" >', '</span>') # PULLS OUT ADDRESS ATTRIBUTE BASED ON DELIMITERS MENTIONED
        city = parse(item, '<span class="jsMapBubbleAddress"  itemprop="addressLocality" >', '</span>') # PULLS OUT CITY ATTRIBUTE BASED ON DELIMITERS MENTIONED
        province = parse(item, '<span class="jsMapBubbleAddress"  itemprop="addressRegion" >', '</span>') # PULLS OUT PROVINCE ATTRIBUTE BASED ON DELIMITERS MENTIONED

# FORMAT POSTAL CODE TO REMOVE SPACE IN BETWEEN FSA LDU

        postal = parse(item, '<span class="jsMapBubbleAddress"  itemprop="postalCode" >', '</span>').replace(" ","").replace("-","") # PULLS OUT POSTAL CODE ATTRIBUTE BASED ON DELIMITERS MENTIONED

# 5 CREATE A LIST OF DUPLICATES AND UNIQUES BASED ON STREET ADDRESS. IF ITS AN EMPTY ADDRESS THEN SKIP OTHERWISE APPEND THE VALUE WITHIN RESPECTIVE LIST ACCORDINGLY

        if address not in list_u_address and address != "":
            list_u_address.append(address)
        elif address in list_u_address and address !="":
            dupelist.append(address)
            continue # IF THE ADDRESS IS A DUPLICATE IT WILL SKIP THE PROCESS BELOW AND PROCEED WITH ABOVE FOR LOOP

#FORMATTING THE PHONE NUMBERS

        phone = list(parse(item, 'data-phone="', '">'))
        list_number = [] #EMPTIES AFTER EACH ITERATION OF THE FOR LOOP ABOVE
        number_numbers = 0 #EMPTIES AFTER EACH ITERATION OF THE FOR LOOP ABOVE
        format_number = "" #EMPTIES AFTER EACH ITERATION OF THE FOR LOOP ABOVE
        for number in phone:
            if number.isnumeric(): #CHECKS IF THE CHARACTER IS NUMERICAL
                list_number.append(number) #APPENDS CHARACTERS ONLY IF THEY ARE NUMBERS TO BE FORMATTED LATER
                number_numbers += 1 #TRACKS THE NUMBER OF DIGITS IN THE PHONE NUMBER
            else:
                continue

        # X-XXX-XXX-XXXX
        # 0'1'234'5'678'9'10111213 NUMBER INDICATES THE INDEX

        if number_numbers == 11 : # IF THE PHONE NUMBER IS 11 DIGIT LONG IT WILL BE FORMATTED AS TOLL FREE NUMBER
            list_number.insert(1,"-")
            list_number.insert(5, "-")
            list_number.insert(9, '-')

        # (XXX)XXX-XXXX
        # '0'123'4'567'8'9101112 NUMBER INDICATES THE INDEX

        if number_numbers == 10: # IF THE PHONE NUMBER IS 10 DIGIT LONG IT WILL BE FORMATTED AS BELOW
            list_number.insert(0, "(")
            list_number.insert(4, ")")
            list_number.insert(8, '-')

        for numbers in list_number:
            format_number += numbers # CONCATENATES THE NUMBERS AND SYMBOLS WITHIN THE LIST

        if postal == "":
            postal = f"No postal code available"
        if format_number == "":
            format_number = f"No phone number available"
        if len(address) > 0:
            resultlist.append({'address': address, 'city': city, 'province': province, 'postal': postal, 'phone': format_number}) # IF THERE IS AN ADDRESS, APPENDS THE LOCATION TO A LIST OF RESULTS

# 4 OUTCOMES FOR PRINTOUT(BOTH PHONE AND POSTAL AVAILABLE, ONLY PHONE AVAILABLE, ONLY POSTAL AVAILABLE, BOTH UNAVAILABLE)

for business in resultlist:
    print(f"Address: {business['address']}, {business['city']}, {business['province']}, {business['postal']} ; Phone Number: {business['phone']}")


print(f'Total entries for {business_name}: {len(resultlist)}')

wb = xlwt.Workbook()
ws = wb.add_sheet('Sheet1')

headers = ['address','city','province','postal','phone']

for col_num,header in enumerate(headers,0): # WRITES DOWN THE HEADERS ON ROW 0
    ws.write(0,col_num,header)

#OPTION 1
# for items in range(len(resultlist)): # OPTION TO PULL ALL DATA WITHIN THE LIST AND FORMAT THEM INTO COLUMNS
#     current_row = resultlist[items]
#     for col_num,header in enumerate(headers,0):
#         ws.write(items+1, col_num, current_row[header])

#OPTION 2
for row,items in enumerate(resultlist,1):
    for col_num,header in enumerate(headers,0):
        ws.write(row,col_num,items[header]) # USES THE ROW MENTIONED FOR EVERY ITERATION OF THE LOOP ALONG WITH THE RESPECTIVE ITEMS(BUSINESS)

#SAVING THE DATA INTO AN XLS

save_direc = input(f"Save it with business name in the xls file? y or n:\n") #CREATES A BUSINESS SPECIFIC XLS
if save_direc.casefold() == "y":
    path = Path(f'C:\\Users\\nicho\\OneDrive\\Desktop\\{username} {business_name}.xls')
    if path.is_file(): # CHECKS IF PATH EXISTS ALREADY WITHIN THE DIRECTORY
        overwrite = input(f"overwrite file? y or n:\n") #ASK USER IF THEY WANT TO OVERWRITE IT
        if overwrite.casefold() == "y".casefold():
            wb.save(path)
            print(f"File saved as {username} {business_name}.xls")

        else: #IF THEY DONT WANT TO OVERWRITE IT, THEN PROMPT USER TO RENAME IT TO SOMETHING ELSE
            new_name = input(f"Please enter new file name:\n")
            path = Path(f'C:\\Users\\nicho\\OneDrive\\Desktop\\{new_name}.xls')
            while path.is_file(): # CHECKS IF NEW NAME EXISTS. IF IT EXISTS; KEEP ON ASKING FOR A NEW NAME
                new_name = input(f"File name already exists. Please enter new file name:\n")
                path = Path(f'C:\\Users\\nicho\\OneDrive\\Desktop\\{new_name}.xls')
            wb.save(path) # ONCE WHILE LOOP IS EXITED, SAVE THE DATA INTO THE XLS RESPECTIVE OF DIRECTORY
            print(f"File saved as {new_name}.xls ")

    else:
        wb.save(f'C:\\Users\\nicho\\OneDrive\\Desktop\\{username} {business_name}.xls')
        print(f"File saved as {username} {business_name}.xls")
else:
    path = Path(f'C:\\Users\\nicho\\OneDrive\\Desktop\\{username}.xls')
    if path.is_file(): # CHECKS IF PATH EXISTS WITHIN THE DIRECTORY
        overwrite = input(f"overwrite file? y or n:\n") #ASK USER IF THEY WANT TO OVERWRITE IT
        if overwrite.casefold() == "y".casefold():
            wb.save(path)
            print(f"File saved as {username}.xls ")
        else:
            new_name = input(f"Please enter new file name:\n")
            path = Path(f'C:\\Users\\nicho\\OneDrive\\Desktop\\{new_name}.xls')
            while path.is_file():  # CHECKS IF NEW NAME EXISTS. IF IT EXISTS;KEEP ON ASKING FOR A NEW NAME
                new_name = input(f"File name already exists. Please enter new file name:\n")
                path = Path(f'C:\\Users\\nicho\\OneDrive\\Desktop\\{new_name}.xls')
            wb.save(path)
            print(f"File saved as {new_name}.xls ")
    else:
        wb.save(f'C:\\Users\\nicho\\OneDrive\\Desktop\\{username}.xls')
        print(f"File saved as {username}.xls ")
